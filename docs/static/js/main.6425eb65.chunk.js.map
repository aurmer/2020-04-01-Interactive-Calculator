{"version":3,"sources":["redux/store.js","App.js","redux/actions.js","serviceWorker.js","index.js"],"names":["initialState","currentEntry","storedEntry","clickedOperatorLast","clickedEnterLast","storedOperator","deepCopy","oldObject","JSON","parse","stringify","reducer","state","action","newState","type","btnValue","payload","buttonId","currentHasNoDot","indexOf","replace","operator","eval","console","dir","createStore","connect","currentDisplay","clickNumber","id","clickOp","clickClear","clickSubmit","props","className","onClick","evt","isOperator","isClear","isSubmit","Number","isNaN","parseInt","fireAction","target","Button","key","style","gridArea","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oKAAA,8DAEMA,aAAe,CACnBC,aAAc,IACdC,YAAa,GACbC,qBAAqB,EACrBC,kBAAkB,EAClBC,eAAgB,IAGLC,SAAW,SAACC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KAGnC,SAASI,UAAwC,IAA/BC,MAA8B,uDAAtBZ,aAAca,OAAQ,uCAC1CC,SAAWR,SAASM,OAExB,OAAQC,OAAOE,MACb,IAAK,iBACH,IAAMC,SAAWH,OAAOI,QAAQC,SAC1BC,iBAA0D,IAAxCL,SAASb,aAAamB,QAAQ,KAGnDN,SAASX,sBACVW,SAASb,aAAe,KAIvBa,SAASV,mBACVU,SAASZ,YAAc,KAGtBiB,iBAAgC,MAAbH,YACpBF,SAASb,cAAgBa,SAASb,aAAeY,OAAOI,QAAQC,UAAUG,QAAQ,YAAY,MACpBA,QAAQ,MAAM,MAG1FP,SAASX,qBAAsB,EAC/BW,SAASV,kBAAmB,EAE5B,MAEF,IAAK,mBACH,IAAMkB,SAAWT,OAAOI,QAAQC,SAE7BJ,SAASX,oBACVW,SAAST,eAAiBiB,SAGK,KAAzBR,SAASZ,aACfY,SAASZ,YAAcY,SAASb,aAChCa,SAAST,eAAiBiB,SAC1BR,SAASX,qBAAsB,IAI/BW,SAASb,aAAT,UAA2BsB,KAAKT,SAASZ,YAAcY,SAAST,eAAiBS,SAASb,eAC1Fa,SAASZ,YAAcY,SAASb,aAChCa,SAAST,eAAiBiB,SAC1BR,SAASX,qBAAsB,GAGjCW,SAASV,kBAAmB,EAE5B,MAEF,IAAK,gBACHU,SAAWd,aACX,MAEF,IAAK,iBACHc,SAASb,aAAT,UAA2BsB,KAAKT,SAASZ,YAAcY,SAAST,eAAiBS,SAASb,eAC1Fa,SAASX,qBAAsB,EAC/BW,SAASZ,YAAcY,SAASb,aAChCa,SAAST,eAAiB,GAC1BS,SAASV,kBAAmB,EAShC,OADAoB,QAAQC,IAAIX,UACLA,SAGMY,mEAAYf,U,gKCpBZgB,mBAPf,SAAyBf,GACvB,MAAO,CACLgB,eAAgBhB,EAAMX,gBAOxB,CACE4B,YCrEuB,SAACC,GAAD,MAAS,CAClCf,KAAM,iBACNE,QAAS,CAACC,SAAUY,KDoElBC,QCjEmB,SAACD,GAAD,MAAS,CAC9Bf,KAAM,mBACNE,QAAS,CAACC,SAAUY,KDgElBE,WC7DsB,iBAAO,CAC/BjB,KAAM,gBACNE,QAAS,KD4DPgB,YCzDuB,iBAAO,CAChClB,KAAM,iBACNE,QAAS,MDiDIU,EArCf,SAAaO,GACX,OACE,oCACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,aAAaC,QAAS,SAACC,GAAD,OAxB7C,SAAoBH,EAAMJ,GACxB,IACMQ,EAAoB,MAAPR,GAAqB,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,EACvDS,EAAiB,MAAPT,EACVU,EAAkB,MAAPV,GAHIW,OAAOC,MAAMC,SAASb,KAAe,MAAPA,EAMjDI,EAAML,YAAYC,GAEZQ,EACNJ,EAAMH,QAAQD,GAERS,EACNL,EAAMF,aAEAQ,GACNN,EAAMD,cAQ0CW,CAAWV,EAAMG,EAAIQ,OAAOf,MACtE,kBAACgB,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,YAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,kBAACH,EAAA,EAAD,CAAQhB,GAAG,IAAIiB,IAAI,IAAIC,MAAO,CAACC,SAAS,cAAxC,KACA,yBAAKd,UAAU,SAASa,MAAO,CAACC,SAAS,WAAaf,EAAMN,sBExClDsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRAC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,KACf,kBAAC,EAAD,OAEFL,GDoHI,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.6425eb65.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\nconst initialState = {\r\n  currentEntry: \"0\",\r\n  storedEntry: \"\",\r\n  clickedOperatorLast: false,\r\n  clickedEnterLast: false,\r\n  storedOperator: \"\"\r\n}\r\n\r\nexport const deepCopy = (oldObject) => {\r\n  return JSON.parse(JSON.stringify(oldObject))\r\n}\r\n\r\nfunction reducer (state = initialState, action) {\r\n  let newState = deepCopy(state)\r\n\r\n  switch (action.type) {\r\n    case \"CLICKED_NUMBER\": {\r\n      const btnValue = action.payload.buttonId\r\n      const currentHasNoDot = newState.currentEntry.indexOf('.') === -1\r\n\r\n      //if an operator was just pushed, we will clear the output on new entry\r\n      if(newState.clickedOperatorLast) {\r\n        newState.currentEntry = \"0\"\r\n      }\r\n\r\n      //if enter was clicked last, and we start a new number, toss stored one\r\n      if(newState.clickedEnterLast) {\r\n        newState.storedEntry = \"\"\r\n      }\r\n\r\n      if(currentHasNoDot || btnValue !== '.') {\r\n        newState.currentEntry = (newState.currentEntry + action.payload.buttonId).replace(/^0([^\\.])/,\"$1\")  //if there is a leading zero before anything other than a period, remove it\r\n                                                                                 .replace(/^00/,\"0\") //if there are two leading zeros, remove one\r\n      }\r\n\r\n      newState.clickedOperatorLast = false\r\n      newState.clickedEnterLast = false\r\n\r\n      break\r\n    }\r\n    case \"CLICKED_OPERATOR\": {\r\n      const operator = action.payload.buttonId\r\n\r\n      if(newState.clickedOperatorLast) {\r\n        newState.storedOperator = operator\r\n      }\r\n      //this is the first number entered. store it with operator\r\n      else if(newState.storedEntry === \"\"){\r\n        newState.storedEntry = newState.currentEntry\r\n        newState.storedOperator = operator\r\n        newState.clickedOperatorLast = true\r\n      }\r\n      //2 numbers are entered with operator. do last operation, return, and keep going\r\n      else {\r\n        newState.currentEntry = `${eval(newState.storedEntry + newState.storedOperator + newState.currentEntry)}`\r\n        newState.storedEntry = newState.currentEntry\r\n        newState.storedOperator = operator\r\n        newState.clickedOperatorLast = true\r\n      }\r\n\r\n      newState.clickedEnterLast = false\r\n\r\n      break\r\n    }\r\n    case \"CLICKED_CLEAR\": {\r\n      newState = initialState\r\n      break\r\n    }\r\n    case \"CLICKED_SUBMIT\": {\r\n      newState.currentEntry = `${eval(newState.storedEntry + newState.storedOperator + newState.currentEntry)}`\r\n      newState.clickedOperatorLast = true\r\n      newState.storedEntry = newState.currentEntry\r\n      newState.storedOperator = \"\"\r\n      newState.clickedEnterLast = true\r\n\r\n      break\r\n    }\r\n    default: {\r\n\r\n    }\r\n  }\r\n  console.dir(newState)\r\n  return newState\r\n}\r\n\r\nexport default createStore(reducer)\r\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Button from 'react-bootstrap/Button'\nimport {\n  clickNumber,\n  clickOp,\n  clickClear,\n  clickSubmit\n} from './redux/actions'\n\nfunction fireAction(props,id) {\n  const isNumerical = !Number.isNaN(parseInt(id)) || id === \".\"\n  const isOperator = id === \"+\" || id === \"-\" || id === \"*\" || id === \"/\"\n  const isClear = id === \"C\"\n  const isSubmit = id === \"=\"\n\n  if(isNumerical) {\n    props.clickNumber(id)\n  }\n  else if(isOperator) {\n    props.clickOp(id)\n  }\n  else if(isClear) {\n    props.clickClear()\n  }\n  else if(isSubmit) {\n    props.clickSubmit()\n  }\n}\n\nfunction App(props) {\n  return (\n    <>\n      <div className=\"app-container\">\n        <div className=\"calculator\" onClick={(evt)=>fireAction(props,evt.target.id)}>\n          <Button id=\"0\" key=\"0\" style={{gridArea:\"button0\"}}>0</Button>\n          <Button id=\"1\" key=\"1\" style={{gridArea:\"button1\"}}>1</Button>\n          <Button id=\"2\" key=\"2\" style={{gridArea:\"button2\"}}>2</Button>\n          <Button id=\"3\" key=\"3\" style={{gridArea:\"button3\"}}>3</Button>\n          <Button id=\"4\" key=\"4\" style={{gridArea:\"button4\"}}>4</Button>\n          <Button id=\"5\" key=\"5\" style={{gridArea:\"button5\"}}>5</Button>\n          <Button id=\"6\" key=\"6\" style={{gridArea:\"button6\"}}>6</Button>\n          <Button id=\"7\" key=\"7\" style={{gridArea:\"button7\"}}>7</Button>\n          <Button id=\"8\" key=\"8\" style={{gridArea:\"button8\"}}>8</Button>\n          <Button id=\"9\" key=\"9\" style={{gridArea:\"button9\"}}>9</Button>\n          <Button id=\"+\" key=\"+\" style={{gridArea:\"buttonAdd\"}}>+</Button>\n          <Button id=\"-\" key=\"-\" style={{gridArea:\"buttonSub\"}}>-</Button>\n          <Button id=\"/\" key=\"/\" style={{gridArea:\"buttonDiv\"}}>/</Button>\n          <Button id=\"*\" key=\"*\" style={{gridArea:\"buttonMlt\"}}>*</Button>\n          <Button id=\"C\" key=\"C\" style={{gridArea:\"buttonClr\"}}>C</Button>\n          <Button id=\".\" key=\".\" style={{gridArea:\"buttonDot\"}}>.</Button>\n          <Button id=\"=\" key=\"=\" style={{gridArea:\"buttonEql\"}}>=</Button>\n          <div className=\"output\" style={{gridArea:\"output\"} }>{props.currentDisplay}</div>\n        </div>\n      </div>\n    </>\n  )\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    currentDisplay: state.currentEntry,\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  {\n    clickNumber,\n    clickOp,\n    clickClear,\n    clickSubmit\n  }\n)(App)\n","\r\nexport const clickNumber = (id) => ({\r\n  type: \"CLICKED_NUMBER\",\r\n  payload: {buttonId: id}\r\n})\r\n\r\nexport const clickOp = (id) => ({\r\n  type: \"CLICKED_OPERATOR\",\r\n  payload: {buttonId: id}\r\n})\r\n\r\nexport const clickClear = () => ({\r\n  type: \"CLICKED_CLEAR\",\r\n  payload: {}\r\n})\r\n\r\nexport const clickSubmit = () => ({\r\n  type: \"CLICKED_SUBMIT\",\r\n  payload: {}\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}